// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: fpstore/fpstore.proto

package fpstore

import (
	common "github.com/acoustid/go-acoustid/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of common/fingerprint.proto.

type Fingerprint = common.Fingerprint

type InsertFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint *common.Fingerprint `protobuf:"bytes,1,opt,name=Fingerprint,proto3" json:"Fingerprint,omitempty"`
}

func (x *InsertFingerprintRequest) Reset() {
	*x = InsertFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertFingerprintRequest) ProtoMessage() {}

func (x *InsertFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertFingerprintRequest.ProtoReflect.Descriptor instead.
func (*InsertFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{0}
}

func (x *InsertFingerprintRequest) GetFingerprint() *common.Fingerprint {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

type InsertFingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InsertFingerprintResponse) Reset() {
	*x = InsertFingerprintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertFingerprintResponse) ProtoMessage() {}

func (x *InsertFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertFingerprintResponse.ProtoReflect.Descriptor instead.
func (*InsertFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{1}
}

func (x *InsertFingerprintResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fingerprint *common.Fingerprint `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *UpdateFingerprintRequest) Reset() {
	*x = UpdateFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFingerprintRequest) ProtoMessage() {}

func (x *UpdateFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFingerprintRequest.ProtoReflect.Descriptor instead.
func (*UpdateFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateFingerprintRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateFingerprintRequest) GetFingerprint() *common.Fingerprint {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

type UpdateFingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateFingerprintResponse) Reset() {
	*x = UpdateFingerprintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFingerprintResponse) ProtoMessage() {}

func (x *UpdateFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFingerprintResponse.ProtoReflect.Descriptor instead.
func (*UpdateFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{3}
}

type DeleteFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteFingerprintRequest) Reset() {
	*x = DeleteFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFingerprintRequest) ProtoMessage() {}

func (x *DeleteFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFingerprintRequest.ProtoReflect.Descriptor instead.
func (*DeleteFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteFingerprintRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteFingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFingerprintResponse) Reset() {
	*x = DeleteFingerprintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFingerprintResponse) ProtoMessage() {}

func (x *DeleteFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFingerprintResponse.ProtoReflect.Descriptor instead.
func (*DeleteFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{5}
}

type GetFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFingerprintRequest) Reset() {
	*x = GetFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFingerprintRequest) ProtoMessage() {}

func (x *GetFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFingerprintRequest.ProtoReflect.Descriptor instead.
func (*GetFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{6}
}

func (x *GetFingerprintRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetFingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint *common.Fingerprint `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *GetFingerprintResponse) Reset() {
	*x = GetFingerprintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFingerprintResponse) ProtoMessage() {}

func (x *GetFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFingerprintResponse.ProtoReflect.Descriptor instead.
func (*GetFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{7}
}

func (x *GetFingerprintResponse) GetFingerprint() *common.Fingerprint {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

type CompareFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint *common.Fingerprint `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Ids         []uint64            `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *CompareFingerprintRequest) Reset() {
	*x = CompareFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareFingerprintRequest) ProtoMessage() {}

func (x *CompareFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareFingerprintRequest.ProtoReflect.Descriptor instead.
func (*CompareFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{8}
}

func (x *CompareFingerprintRequest) GetFingerprint() *common.Fingerprint {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

func (x *CompareFingerprintRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type MatchingFingerprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Similarity float32 `protobuf:"fixed32,2,opt,name=similarity,proto3" json:"similarity,omitempty"`
}

func (x *MatchingFingerprint) Reset() {
	*x = MatchingFingerprint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingFingerprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingFingerprint) ProtoMessage() {}

func (x *MatchingFingerprint) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingFingerprint.ProtoReflect.Descriptor instead.
func (*MatchingFingerprint) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{9}
}

func (x *MatchingFingerprint) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchingFingerprint) GetSimilarity() float32 {
	if x != nil {
		return x.Similarity
	}
	return 0
}

type CompareFingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*MatchingFingerprint `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CompareFingerprintResponse) Reset() {
	*x = CompareFingerprintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareFingerprintResponse) ProtoMessage() {}

func (x *CompareFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareFingerprintResponse.ProtoReflect.Descriptor instead.
func (*CompareFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{10}
}

func (x *CompareFingerprintResponse) GetResults() []*MatchingFingerprint {
	if x != nil {
		return x.Results
	}
	return nil
}

type SearchFingerprintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fingerprint *common.Fingerprint `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Limit       int32               `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchFingerprintRequest) Reset() {
	*x = SearchFingerprintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFingerprintRequest) ProtoMessage() {}

func (x *SearchFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFingerprintRequest.ProtoReflect.Descriptor instead.
func (*SearchFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{11}
}

func (x *SearchFingerprintRequest) GetFingerprint() *common.Fingerprint {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

func (x *SearchFingerprintRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchFingerprintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*MatchingFingerprint `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *SearchFingerprintResponse) Reset() {
	*x = SearchFingerprintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fpstore_fpstore_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFingerprintResponse) ProtoMessage() {}

func (x *SearchFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fpstore_fpstore_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFingerprintResponse.ProtoReflect.Descriptor instead.
func (*SearchFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_fpstore_fpstore_proto_rawDescGZIP(), []int{12}
}

func (x *SearchFingerprintResponse) GetResults() []*MatchingFingerprint {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_fpstore_fpstore_proto protoreflect.FileDescriptor

var file_fpstore_fpstore_proto_rawDesc = []byte{
	0x0a, 0x15, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x18, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x52, 0x0b, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x2b, 0x0a,
	0x19, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x1b, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x64, 0x0a,
	0x19, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0x54, 0x0a, 0x1a, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x70, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x67, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x53, 0x0a, 0x19, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0xfe,
	0x03, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x21, 0x2e,
	0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x21, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x70, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x63,
	0x6f, 0x75, 0x73, 0x74, 0x69, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x61, 0x63, 0x6f, 0x75, 0x73, 0x74,
	0x69, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x3b, 0x66, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_fpstore_fpstore_proto_rawDescOnce sync.Once
	file_fpstore_fpstore_proto_rawDescData = file_fpstore_fpstore_proto_rawDesc
)

func file_fpstore_fpstore_proto_rawDescGZIP() []byte {
	file_fpstore_fpstore_proto_rawDescOnce.Do(func() {
		file_fpstore_fpstore_proto_rawDescData = protoimpl.X.CompressGZIP(file_fpstore_fpstore_proto_rawDescData)
	})
	return file_fpstore_fpstore_proto_rawDescData
}

var file_fpstore_fpstore_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_fpstore_fpstore_proto_goTypes = []interface{}{
	(*InsertFingerprintRequest)(nil),   // 0: fpstore.InsertFingerprintRequest
	(*InsertFingerprintResponse)(nil),  // 1: fpstore.InsertFingerprintResponse
	(*UpdateFingerprintRequest)(nil),   // 2: fpstore.UpdateFingerprintRequest
	(*UpdateFingerprintResponse)(nil),  // 3: fpstore.UpdateFingerprintResponse
	(*DeleteFingerprintRequest)(nil),   // 4: fpstore.DeleteFingerprintRequest
	(*DeleteFingerprintResponse)(nil),  // 5: fpstore.DeleteFingerprintResponse
	(*GetFingerprintRequest)(nil),      // 6: fpstore.GetFingerprintRequest
	(*GetFingerprintResponse)(nil),     // 7: fpstore.GetFingerprintResponse
	(*CompareFingerprintRequest)(nil),  // 8: fpstore.CompareFingerprintRequest
	(*MatchingFingerprint)(nil),        // 9: fpstore.MatchingFingerprint
	(*CompareFingerprintResponse)(nil), // 10: fpstore.CompareFingerprintResponse
	(*SearchFingerprintRequest)(nil),   // 11: fpstore.SearchFingerprintRequest
	(*SearchFingerprintResponse)(nil),  // 12: fpstore.SearchFingerprintResponse
	(*common.Fingerprint)(nil),         // 13: common.Fingerprint
}
var file_fpstore_fpstore_proto_depIdxs = []int32{
	13, // 0: fpstore.InsertFingerprintRequest.Fingerprint:type_name -> common.Fingerprint
	13, // 1: fpstore.UpdateFingerprintRequest.fingerprint:type_name -> common.Fingerprint
	13, // 2: fpstore.GetFingerprintResponse.fingerprint:type_name -> common.Fingerprint
	13, // 3: fpstore.CompareFingerprintRequest.fingerprint:type_name -> common.Fingerprint
	9,  // 4: fpstore.CompareFingerprintResponse.results:type_name -> fpstore.MatchingFingerprint
	13, // 5: fpstore.SearchFingerprintRequest.fingerprint:type_name -> common.Fingerprint
	9,  // 6: fpstore.SearchFingerprintResponse.results:type_name -> fpstore.MatchingFingerprint
	0,  // 7: fpstore.FingerprintStore.Insert:input_type -> fpstore.InsertFingerprintRequest
	2,  // 8: fpstore.FingerprintStore.Update:input_type -> fpstore.UpdateFingerprintRequest
	4,  // 9: fpstore.FingerprintStore.Delete:input_type -> fpstore.DeleteFingerprintRequest
	6,  // 10: fpstore.FingerprintStore.Get:input_type -> fpstore.GetFingerprintRequest
	11, // 11: fpstore.FingerprintStore.Search:input_type -> fpstore.SearchFingerprintRequest
	8,  // 12: fpstore.FingerprintStore.Compare:input_type -> fpstore.CompareFingerprintRequest
	1,  // 13: fpstore.FingerprintStore.Insert:output_type -> fpstore.InsertFingerprintResponse
	3,  // 14: fpstore.FingerprintStore.Update:output_type -> fpstore.UpdateFingerprintResponse
	5,  // 15: fpstore.FingerprintStore.Delete:output_type -> fpstore.DeleteFingerprintResponse
	7,  // 16: fpstore.FingerprintStore.Get:output_type -> fpstore.GetFingerprintResponse
	12, // 17: fpstore.FingerprintStore.Search:output_type -> fpstore.SearchFingerprintResponse
	10, // 18: fpstore.FingerprintStore.Compare:output_type -> fpstore.CompareFingerprintResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_fpstore_fpstore_proto_init() }
func file_fpstore_fpstore_proto_init() {
	if File_fpstore_fpstore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fpstore_fpstore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertFingerprintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFingerprintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFingerprintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFingerprintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchingFingerprint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareFingerprintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFingerprintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fpstore_fpstore_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFingerprintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fpstore_fpstore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fpstore_fpstore_proto_goTypes,
		DependencyIndexes: file_fpstore_fpstore_proto_depIdxs,
		MessageInfos:      file_fpstore_fpstore_proto_msgTypes,
	}.Build()
	File_fpstore_fpstore_proto = out.File
	file_fpstore_fpstore_proto_rawDesc = nil
	file_fpstore_fpstore_proto_goTypes = nil
	file_fpstore_fpstore_proto_depIdxs = nil
}
