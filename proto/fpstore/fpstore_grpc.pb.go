// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fpstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FingerprintStoreClient is the client API for FingerprintStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FingerprintStoreClient interface {
	Insert(ctx context.Context, in *InsertFingerprintRequest, opts ...grpc.CallOption) (*InsertFingerprintResponse, error)
	Update(ctx context.Context, in *UpdateFingerprintRequest, opts ...grpc.CallOption) (*UpdateFingerprintResponse, error)
	Delete(ctx context.Context, in *DeleteFingerprintRequest, opts ...grpc.CallOption) (*DeleteFingerprintResponse, error)
	Get(ctx context.Context, in *GetFingerprintRequest, opts ...grpc.CallOption) (*GetFingerprintResponse, error)
	Search(ctx context.Context, in *SearchFingerprintRequest, opts ...grpc.CallOption) (*SearchFingerprintResponse, error)
	Compare(ctx context.Context, in *CompareFingerprintRequest, opts ...grpc.CallOption) (*CompareFingerprintResponse, error)
}

type fingerprintStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewFingerprintStoreClient(cc grpc.ClientConnInterface) FingerprintStoreClient {
	return &fingerprintStoreClient{cc}
}

func (c *fingerprintStoreClient) Insert(ctx context.Context, in *InsertFingerprintRequest, opts ...grpc.CallOption) (*InsertFingerprintResponse, error) {
	out := new(InsertFingerprintResponse)
	err := c.cc.Invoke(ctx, "/fpstore.FingerprintStore/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fingerprintStoreClient) Update(ctx context.Context, in *UpdateFingerprintRequest, opts ...grpc.CallOption) (*UpdateFingerprintResponse, error) {
	out := new(UpdateFingerprintResponse)
	err := c.cc.Invoke(ctx, "/fpstore.FingerprintStore/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fingerprintStoreClient) Delete(ctx context.Context, in *DeleteFingerprintRequest, opts ...grpc.CallOption) (*DeleteFingerprintResponse, error) {
	out := new(DeleteFingerprintResponse)
	err := c.cc.Invoke(ctx, "/fpstore.FingerprintStore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fingerprintStoreClient) Get(ctx context.Context, in *GetFingerprintRequest, opts ...grpc.CallOption) (*GetFingerprintResponse, error) {
	out := new(GetFingerprintResponse)
	err := c.cc.Invoke(ctx, "/fpstore.FingerprintStore/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fingerprintStoreClient) Search(ctx context.Context, in *SearchFingerprintRequest, opts ...grpc.CallOption) (*SearchFingerprintResponse, error) {
	out := new(SearchFingerprintResponse)
	err := c.cc.Invoke(ctx, "/fpstore.FingerprintStore/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fingerprintStoreClient) Compare(ctx context.Context, in *CompareFingerprintRequest, opts ...grpc.CallOption) (*CompareFingerprintResponse, error) {
	out := new(CompareFingerprintResponse)
	err := c.cc.Invoke(ctx, "/fpstore.FingerprintStore/Compare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FingerprintStoreServer is the server API for FingerprintStore service.
// All implementations must embed UnimplementedFingerprintStoreServer
// for forward compatibility
type FingerprintStoreServer interface {
	Insert(context.Context, *InsertFingerprintRequest) (*InsertFingerprintResponse, error)
	Update(context.Context, *UpdateFingerprintRequest) (*UpdateFingerprintResponse, error)
	Delete(context.Context, *DeleteFingerprintRequest) (*DeleteFingerprintResponse, error)
	Get(context.Context, *GetFingerprintRequest) (*GetFingerprintResponse, error)
	Search(context.Context, *SearchFingerprintRequest) (*SearchFingerprintResponse, error)
	Compare(context.Context, *CompareFingerprintRequest) (*CompareFingerprintResponse, error)
	mustEmbedUnimplementedFingerprintStoreServer()
}

// UnimplementedFingerprintStoreServer must be embedded to have forward compatible implementations.
type UnimplementedFingerprintStoreServer struct {
}

func (UnimplementedFingerprintStoreServer) Insert(context.Context, *InsertFingerprintRequest) (*InsertFingerprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedFingerprintStoreServer) Update(context.Context, *UpdateFingerprintRequest) (*UpdateFingerprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFingerprintStoreServer) Delete(context.Context, *DeleteFingerprintRequest) (*DeleteFingerprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFingerprintStoreServer) Get(context.Context, *GetFingerprintRequest) (*GetFingerprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFingerprintStoreServer) Search(context.Context, *SearchFingerprintRequest) (*SearchFingerprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFingerprintStoreServer) Compare(context.Context, *CompareFingerprintRequest) (*CompareFingerprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compare not implemented")
}
func (UnimplementedFingerprintStoreServer) mustEmbedUnimplementedFingerprintStoreServer() {}

// UnsafeFingerprintStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FingerprintStoreServer will
// result in compilation errors.
type UnsafeFingerprintStoreServer interface {
	mustEmbedUnimplementedFingerprintStoreServer()
}

func RegisterFingerprintStoreServer(s grpc.ServiceRegistrar, srv FingerprintStoreServer) {
	s.RegisterService(&FingerprintStore_ServiceDesc, srv)
}

func _FingerprintStore_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingerprintStoreServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fpstore.FingerprintStore/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingerprintStoreServer).Insert(ctx, req.(*InsertFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FingerprintStore_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingerprintStoreServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fpstore.FingerprintStore/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingerprintStoreServer).Update(ctx, req.(*UpdateFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FingerprintStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingerprintStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fpstore.FingerprintStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingerprintStoreServer).Delete(ctx, req.(*DeleteFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FingerprintStore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingerprintStoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fpstore.FingerprintStore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingerprintStoreServer).Get(ctx, req.(*GetFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FingerprintStore_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingerprintStoreServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fpstore.FingerprintStore/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingerprintStoreServer).Search(ctx, req.(*SearchFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FingerprintStore_Compare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingerprintStoreServer).Compare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fpstore.FingerprintStore/Compare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingerprintStoreServer).Compare(ctx, req.(*CompareFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FingerprintStore_ServiceDesc is the grpc.ServiceDesc for FingerprintStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FingerprintStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fpstore.FingerprintStore",
	HandlerType: (*FingerprintStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _FingerprintStore_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FingerprintStore_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FingerprintStore_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FingerprintStore_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _FingerprintStore_Search_Handler,
		},
		{
			MethodName: "Compare",
			Handler:    _FingerprintStore_Compare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fpstore/fpstore.proto",
}
